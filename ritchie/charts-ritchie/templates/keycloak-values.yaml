init:
  image:
    repository: busybox
    tag: 1.31
    pullPolicy: IfNotPresent
  resources: {}
clusterDomain: cluster.local
keycloak:
  replicas: 1
  image:
    repository: jboss/keycloak
    tag: 9.0.2
    pullPolicy: IfNotPresent
    pullSecrets: []
  hostAliases: []
  proxyAddressForwarding: true
  enableServiceLinks: false
  podManagementPolicy: Parallel
  restartPolicy: Always
  serviceAccount:
    create: false
    name:
  securityContext:
    fsGroup: 1000
  containerSecurityContext:
    runAsUser: 1000
    runAsNonRoot: true
  basepath: auth
  extraInitContainers: |
  extraContainers: |
  lifecycleHooks: |
    # postStart:
    #   exec:
    #     command: ["/bin/sh", "-c", "ls"]
  terminationGracePeriodSeconds: 60
  extraArgs:  -Dkeycloak.import=/realm/realm-secret -Dkeycloak.profile.feature.scripts=enabled -Dkeycloak.profile.feature.upload_scripts=enabled
  username: keycloak
  password: "{{ keycloakAdminPassword }}"
  existingSecret: ""
  existingSecretKey: password
  jgroups:
    discoveryProtocol: dns.DNS_PING
    discoveryProperties: >
      "dns_query={{ template "keycloak.fullname" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"
  javaToolOptions: >-
    -XX:+UseContainerSupport
    -XX:MaxRAMPercentage=50.0
  extraEnv: |
    - name: DB_USER
      value: "{{ keycloakDbUser }}"
    - name: DB_PASSWORD
      value: "{{ keycloakDbPassword }}"
    - name: DB_VENDOR
      value: "POSTGRES"
    - name: DB_PORT
      value: "5432"
    - name: DB_ADDR
      value: "{{ keycloakDbAddress }}"
    - name: DB_DATABASE
      value: "{{ keycloakDbDatabase }}"
    - name: DB_SCHEMA
      value: "public"
    - name: KEYCLOAK_USER
      value: "admin"
    - name: PROXY_ADDRESS_FORWARDING
      value: "true"
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "keycloak.selectorLabels" . | nindent 10 }}
            matchExpressions:
              - key: role
                operator: NotIn
                values:
                  - test
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "keycloak.selectorLabels" . | nindent 12 }}
              matchExpressions:
                - key: role
                  operator: NotIn
                  values:
                    - test
            topologyKey: failure-domain.beta.kubernetes.io/zone
  nodeSelector: {}
  priorityClassName: ""
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  livenessProbe: |
    httpGet:
      path: {{ if ne .Values.keycloak.basepath "" }}/{{ .Values.keycloak.basepath }}{{ end }}/
      port: http
    initialDelaySeconds: 300
    timeoutSeconds: 5
  readinessProbe: |
    httpGet:
      path: {{ if ne .Values.keycloak.basepath "" }}/{{ .Values.keycloak.basepath }}{{ end }}/realms/master
      port: http
    initialDelaySeconds: 30
    timeoutSeconds: 1
  resources:
    limits:
      cpu: "1024m"
      memory: "1024Mi"
    requests:
      cpu: "256m"
      memory: "512Mi"
  cli:
    enabled: true
    nodeIdentifier: |
      {{ .Files.Get "scripts/node-identifier.cli" }}
    logging: |
      {{ .Files.Get "scripts/logging.cli" }}
    ha: |
      {{ .Files.Get "scripts/ha.cli" }}
    datasource: |
      {{ .Files.Get "scripts/datasource.cli" }}
    custom: |
  startupScripts: {}
  extraVolumes: |
    - name: realm-secret
      secret:
        secretName: realm-secret
  extraVolumeMounts: |
    - name: realm-secret
      mountPath: "/realm/"
      readOnly: true
  extraPorts: |
  podDisruptionBudget: {}
  service:
    annotations: {}
    labels: {}
    type: ClusterIP
    httpPort: 80
    httpsPort: 8443
    jgroupsPort: 7600
  ingress:
    enabled: false
    path: /
    annotations: {}
    labels: {}
    hosts:
      - keycloak.example.com
    tls: []
  route:
    enabled: false
    path: /
    annotations: {}
    labels: {}
    host:
    tls:
      enabled: true
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
  persistence:
    deployPostgres: false
    dbVendor: h2
    dbName: keycloak
    dbHost: mykeycloak
    dbPort: 5432
    existingSecret: ""
    existingSecretPasswordKey: ""
    existingSecretUsernameKey: ""
    dbUser: keycloak
    dbPassword: ""
postgresql:
  postgresqlUsername: keycloak
  postgresqlPassword: ""
  postgresqlDatabase: keycloak
  persistence:
    enabled: false
test:
  enabled: true
  image:
    repository: unguiculus/docker-python3-phantomjs-selenium
    tag: v1
    pullPolicy: IfNotPresent
  securityContext:
    fsGroup: 1000
  containerSecurityContext:
    runAsUser: 1000
    runAsNonRoot: true
prometheus:
  operator:
    enabled: false
    serviceMonitor:
      namespace: ""
      selector:
        release: prometheus
      interval: 10s
      scrapeTimeout: 10s
      path: /auth/realms/master/metrics
    prometheusRules:
      enabled: false
      selector:
        app: prometheus-operator
        release: prometheus
      rules: {}